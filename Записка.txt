class BinaryTree{
    Node root;
    class Node{
        int value;
String color;
        Node left;
        Node right;
    }

    boolean push(int value){
        if(root == null){
            root = new Node();
            root.value = value;
root.color=black;
            return true;
        }else {
            Node node = root;
            while (node != null) {
                if (node.value == value) {
                    return false;
                }
                if (node.value < value) {
                    if (node.right == null) {
// Делаем ребалансировку:Поворот вправо
        
                        return true;
                    } else {
                        node = node.right;
                    }
                } else {
                    if (node.left == null) {
                        node.left = new Node();
                        node.left.value = value;
node.left.color = red;


                        return true;
                    } else {
                        node = node.left;
                    }
                }
            }
            return false;
        }
    }

    boolean find(int value){
        Node node = root;
        while(node != null){
            if(node.value == value){
                return true;
            }
            if(node.value < value){
                node = node.right;
            }else{
                node = node.left;
            }
        }
        return false;
    }

}
public class Main {
    public static void main(String[] args) {
//        HashMap map = new HashMap();
//        map.push(1, 2);
//        map.push(3, 4);
//        map.push(5, 6);
//
//        System.out.println(map.find(3));
//        System.out.println(map.find(2));
//
//        map.push(17, 8);
//
//        System.out.println(map.find(17));

        BinaryTree tree = new BinaryTree();

        tree.push(5);
        tree.push(3);
        tree.push(7);
        tree.push(2);
        tree.push(4);
        tree.push(6);
        tree.push(8);

        System.out.println(tree.find(8));
        System.out.println(tree.find(10));

    }
}
